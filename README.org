#+title: RestClient.jl
#+author: tecosaur

#+html: <a href="https://tecosaur.net"><img src="https://img.shields.io/badge/%F0%9F%A6%95-tec-27a560.svg"></a>
#+html: <a href="https://tecosaur.github.io/RestClient.jl/stable/"><img src="https://img.shields.io/badge/docs-stable-blue.svg"></a>
#+html: <a href="https://tecosaur.github.io/RestClient.jl/dev/"><img src="https://img.shields.io/badge/docs-dev-blue.svg"></a>
#+html: <a href="https://www.tldrlegal.com/license/mozilla-public-license-2-0-mpl-2"><img src="https://img.shields.io/badge/license-MPL%202.0-teal.svg"></a>
#+html: <a href="https://liberapay.com/tec"><img src="https://shields.io/badge/support%20my%20efforts-f6c915?logo=Liberapay&logoColor=black"></a>

Simplify the process of interacting with RESTful APIs with concise but capable
utilities for defining endpoints, request handling, and response parsing. This
package aims to absorb as much of the common complexity of interfacing with an
API as possible, and provide sensible OOTB behaviour with minimal setup.

See the docs' tutorial for a guided example on how to write a client with this package.

* Features

+ Minimal Boilerplate :: Defining an API endpoint can take just a single line of code.
+ Built-in common functionality :: Debugging utilities, URI encoding, caching, and rate limiting.
+ Easy serialisation :: Straightforward interoperability with JSON3 and XML via
  ~@jsondef~ and ~@xmldef~.
+ Flexibility :: Extensible to support custom serialisation formats, complex requests, and more.

* Example

#+begin_src julia
module CoffeeClient

using RestClient, JSON3

@globalconfig RequestConfig("https://api.sampleapis.com/coffee")

@jsondef struct Coffee
    title::String
    description::String
    ingredients::Vector{String}
    image::String
    id::Int
end

@endpoint hot() -> "hot" -> Vector{Coffee}
@endpoint iced() -> "iced" -> Vector{Coffee}

end
#+end_src

This is fully-functional, you can now call the API with ~CoffeeClient.hot()~ â˜•
and ~CoffeeClient.iced()~ ðŸ§‹.
